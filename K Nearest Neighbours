{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "interpreter": {
      "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.6"
    },
    "colab": {
      "name": "2019506037.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "NnIR7S4ylqBt"
      },
      "source": [
        "from google.colab import drive"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "caG1p94Ilu-v",
        "outputId": "46a64a7c-19e8-4288-c53a-8c2265546b0d"
      },
      "source": [
        "drive.mount('/content/drive')\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xQXIQiNjln0H"
      },
      "source": [
        "import pandas as pd\n",
        "from textblob import TextBlob\n",
        "\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "Zg9A_NX9ln0N",
        "outputId": "36954a3a-ed96-4808-900c-ac5a14f0f07d"
      },
      "source": [
        "d = pd.read_csv(\"/processed_tweets.csv\")\n",
        "d = d.drop(\"Unnamed: 0\",axis=1)\n",
        "d = d.rename(columns={\"0\":\"Text\"})\n",
        "d.head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>account grow difficult keep track people activ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>release lyric video collab song bipolar sunshi...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>stargalaxy genuinely cant even imagine second ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>theres call call spark call world always</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>scary plausible</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>track trace utterly useless proof covid spread...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>camp never lose faith team proud aggie remembe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>bhpv merge bhel say announce lok sabha ncbn lo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>check result last two weeks arround time sum n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>see cabinet minister speak television deep thi...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   index                                               Text\n",
              "0      0  account grow difficult keep track people activ...\n",
              "1      1  release lyric video collab song bipolar sunshi...\n",
              "2      2  stargalaxy genuinely cant even imagine second ...\n",
              "3      3           theres call call spark call world always\n",
              "4      4                                    scary plausible\n",
              "5      5  track trace utterly useless proof covid spread...\n",
              "6      6  camp never lose faith team proud aggie remembe...\n",
              "7      8  bhpv merge bhel say announce lok sabha ncbn lo...\n",
              "8      9  check result last two weeks arround time sum n...\n",
              "9     10  see cabinet minister speak television deep thi..."
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S8SHYD_FnpTO",
        "outputId": "3ff4fcc5-7a38-4fd7-ae04-9008fb27b736"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3D3Jv06bln0O",
        "outputId": "2d30c61a-91d8-4a2b-83ec-a7e43ed321d4"
      },
      "source": [
        "d.isna().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "index    0\n",
              "Text     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jaDEatbnln0P"
      },
      "source": [
        "d.dropna(inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uVL8nlqLln0P",
        "outputId": "bedf37e4-53f4-4750-9acc-252e3f263565"
      },
      "source": [
        "d.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 6294 entries, 0 to 6293\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   index   6294 non-null   int64 \n",
            " 1   Text    6294 non-null   object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 147.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "nAU--hOCln0Q",
        "outputId": "dd0e4548-76fa-4220-d8a3-02b0237f6b4c"
      },
      "source": [
        "n = len(d)\n",
        "d[\"Sentiment\"]=[None for i in range(n)]\n",
        "for i in range(n):\n",
        "    \n",
        "    s = TextBlob(d[\"Text\"].iloc[i]).sentiment\n",
        "    if(s[0]>=0):\n",
        "        d[\"Sentiment\"].iloc[i] = 0\n",
        "    else:\n",
        "        d[\"Sentiment\"].iloc[i] = 1\n",
        "        \n",
        "d.iloc[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Text</th>\n",
              "      <th>Sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>account grow difficult keep track people activ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>release lyric video collab song bipolar sunshi...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>stargalaxy genuinely cant even imagine second ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>theres call call spark call world always</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>scary plausible</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>track trace utterly useless proof covid spread...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>camp never lose faith team proud aggie remembe...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>bhpv merge bhel say announce lok sabha ncbn lo...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>check result last two weeks arround time sum n...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>see cabinet minister speak television deep thi...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   index                                               Text Sentiment\n",
              "0      0  account grow difficult keep track people activ...         1\n",
              "1      1  release lyric video collab song bipolar sunshi...         0\n",
              "2      2  stargalaxy genuinely cant even imagine second ...         0\n",
              "3      3           theres call call spark call world always         0\n",
              "4      4                                    scary plausible         0\n",
              "5      5  track trace utterly useless proof covid spread...         0\n",
              "6      6  camp never lose faith team proud aggie remembe...         0\n",
              "7      8  bhpv merge bhel say announce lok sabha ncbn lo...         0\n",
              "8      9  check result last two weeks arround time sum n...         0\n",
              "9     10  see cabinet minister speak television deep thi...         0"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xnGHi2exln0Q",
        "outputId": "0f534b42-9f12-4b95-d152-e7f9d278b4ce"
      },
      "source": [
        "len(d[d[\"Sentiment\"]==0]), len(d[d[\"Sentiment\"]==1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4667, 1627)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HvtdUb_7ln0R"
      },
      "source": [
        "no = len(d[d[\"Sentiment\"]==1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v5CrXEXmln0S"
      },
      "source": [
        "t = d[d[\"Sentiment\"]==0][:no]\n",
        "s = d[d[\"Sentiment\"]==1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lQHPnwjlln0T",
        "outputId": "4083cf19-1869-4020-9c3d-9f9ed2f1f8a9"
      },
      "source": [
        "df = pd.concat([s,t],ignore_index=\"True\")\n",
        "len(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3254"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rwrwYJ7Pln0U"
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "x1 = CountVectorizer().fit_transform(df[\"Text\"])\n",
        "x2 = TfidfVectorizer().fit_transform(df[\"Text\"])\n",
        "y = df[\"Sentiment\"]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "09eYe5asln0U"
      },
      "source": [
        "# Splitting into Train and Test Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qHhH7ckdln0W"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_train,x_test, y_train, y_test = train_test_split(x1,y,test_size=0.3,random_state=42)\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(x2,y,test_size=0.3,random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DF21TuqHln0X"
      },
      "source": [
        "# CountVectorizer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1pfNX_Z4ln0Y",
        "outputId": "ba40afed-da24-4f88-a532-adf709eb528a"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn import metrics\n",
        "import numpy as np\n",
        "\n",
        "#classifier = kNeighborsClassifier()\n",
        "classifier = KNeighborsClassifier(n_neighbors=7)\n",
        "x_train = x_train.astype(int)\n",
        "y_train = y_train.astype(int)\n",
        "classifier.fit(x_train,y_train)\n",
        "y_pred = classifier.predict(x_test)\n",
        "print(\"Accuracy of KNeighborsClassifier with CountVectorizer:\",metrics.accuracy_score(list(y_test.values), y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of KNeighborsClassifier with CountVectorizer: 0.6857727737973388\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bHYsTzkzln0Z"
      },
      "source": [
        "# TfidfVectorizer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kQWeoMvTln0a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd4f0c03-7b5d-45c8-9967-ed0053a0bf43"
      },
      "source": [
        "classifier= KNeighborsClassifier(n_neighbors=7)\n",
        "X_train = X_train.astype(int)\n",
        "Y_train = Y_train.astype(int)\n",
        "classifier.fit(X_train,Y_train)\n",
        "Y_pred = classifier.predict(X_test)\n",
        "print(\"Accuracy of KNeighborsClassifier with TfidfVectorizer:\",metrics.accuracy_score(list(Y_test.values), Y_pred))"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of KNeighborsClassifier with TfidfVectorizer: 0.47697031729785055\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_1ePSuCvln0a"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}